package codeBreaker;

/**
 * Names: Samantha Ouyang and Amitoj Sohanpal 
 * Date: December 5, 2019 
 * Assignment: Codebreaker Task
 */
//import all required imports, including swing, awt, io, and util
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.*;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;
import java.awt.event.ActionEvent;
import java.awt.*;
import java.io.*;
import java.util.Scanner;

public class CodeBreakerFinal extends JFrame implements ActionListener { //create the main class that extends the main JFrame and implements actionlistener for buttons
    static String guess = ""; //create public variable that holds current guess
    static ArrayList<String> allCodes = new ArrayList<>(); //master list of all codes that can be created in code breaker
    static ArrayList<String> possibleCodes = new ArrayList<>(); // computers reduced list of possible codes through elimination
    static int Black = 0; //number of black pegs
    static int White = 0; //number of white pegs
    final static String[] COLOURS = {"BLACK", "WHITE", "RED", "BLUE", "YELLOW", "GREEN", "PURPLE", "ORANGE"}; //create a string array of all colours
    final static Color[] BUTTON_COLOURS = {Color.BLACK, Color.WHITE, Color.RED, Color.BLUE, Color.YELLOW, Color.GREEN, new Color(147, 112, 219), Color.ORANGE}; //create a circle button array of all colours
    static CircleButton[][] gameState; //create a 2d array of circle buttons for the gameboard
    static String[][] gameBoard; //create a 2d array for the gameboard, holding all values in the form of a string
    static CircleButton[][] hints; //create a 2d array of circle buttons for the hints
    static String[][] hintBoard; //create a 2d array for the hints, holding all values in the form of a string
    static int current_row = 0; //create a variable for the current row
    static int current_col = 0; //create a variable for the current column
    static CircleButton[] colourChoices; //create an array of circle buttons for the colour choices within a code
    static CircleButton[] UserPegs; //create an array of circle buttons for the hints when the user is entering them
    static JButton delete = new JButton("Delete"); //create a button called delete, in case the code or hint is entered wrong
    static JButton check = new JButton("Check"); //create a button called check, to check the code entered. It can later be changed to an enter button, for entering hints when the player is doing so
    static String computerCode; //create a string of the code generated by the computer to guess using numbers
    static CircleButton[] code; //create an array of circle buttons of the code that is to be guessed
    static String[] stringCode; //create a string array of the code to be guessed, including all the colour names
    static JLabel mode; //create a label for whether it is PVP or CVP mode
    static JPanel colourChoicesPanel; //create a panel for the colour choices
    static JLabel response; //create a label for responses or prompts to display for the user
    static String turn; //create a variable to determine whose turn it is to guess the code
    static JPanel solutionSet = new JPanel();
    private JMenuItem menu2Item1 = new JMenuItem("Computer vs. Player"); //create a menu dropdown item for computer vs player
    private JMenuItem menu2Item2 = new JMenuItem("Player vs. Computer"); //create a menu dropdown item for player vs computer
    private JMenuItem menu1Item = new JMenuItem("How to Play"); //create a menu dropdown item for how to play
    private JMenuItem menu3Item = new JMenuItem("Save"); //create a menu dropdown item to save the game
    private JMenuItem menu4Item = new JMenuItem("Load"); //create a menu dropdown item to load the last saved game

    //constructor
    public CodeBreakerFinal() {
        //create the main gameboard where the code is being guessed
        gameState = new CircleButton[10][4]; //create a 2d array of circle buttons with 10 rows and 4 columns
        gameBoard = new String[10][4]; //create a 2d string array with 10 rows and columns
        for (int row = 0; row < 10; row++) { //run through rows
            for (int col = 0; col < 4; col++) { //run through columns
                gameState[row][col] = new CircleButton("txt", Color.BLACK); //create a new circle button, set string for sizing, and set colour as black
                gameBoard[row][col] = "BLACK"; //set the element at the string array as black
            }
        }

        //create the hint board
        hints = new CircleButton[10][4]; //create a 2d array of circle buttons with 10 rows and 4 columns
        hintBoard = new String[10][4]; //create a 2d string array with 10 rows and columns
        for (int row = 0; row < 10; row++) { //run through rows
            for (int col = 0; col < 4; col++) { //run through columns
                hints[row][col] = new CircleButton("", Color.GRAY); //create a new circle button, set string for sizing, set colour as gray
                hintBoard[row][col] = "GRAY"; //set the element at the string array as gray
            }
        }

        setLayout(new GridLayout(1, 3, 13, 0)); //set the layout of the frame as a grid with 1 row, 3 columns, and 13 pixels of space between each horizontally

        //setting up the code for colourChoices
        colourChoices = new CircleButton[6]; //create an array of 6 circle buttons for the colours to choose from
        for (int i = 0; i < 6; i++) { //run through 6 times
            colourChoices[i] = new CircleButton("a", BUTTON_COLOURS[i + 2]); //create a new circle button, set string for size, and set colour at index+2 to disregard the black and white
            colourChoices[i].addActionListener(new ActionListener() { //add an action listener to each button of the colour choices
                @Override
                public void actionPerformed(ActionEvent e) { //create a method if one this button is pressed
                    boolean flag = true;
                    Black = 0;
                    for (int i = 0; i < 4; i++) {
                        if (current_row != 0 && hintBoard[current_row - 1][i].equals("BLACK")) {
                            Black++;
                        }
                    }
                    if (Black == 4) {
                        flag = false;
                    }
                    if (flag) {
                        for (int i = 0; i < 6; i++) { //run through 6 times
                            if (colourChoices[i] == e.getSource()) { //determine which color button was pressed
                                if (current_col > 3) { //if the current column is greater than 3
                                    response.setText("<html><body>Code is at max length</body></html>"); //tell user that the code is at max length
                                    current_col = 3; //set current column to 3 so that if delete is pressed, errors will not show up assigning black to buttons out of bounds
                                } 
                                else { //if the current column is less than 3
                                    if (turn.equals("Player")) { //if it is the player's turn
                                        gameState[current_row][current_col].setColor(BUTTON_COLOURS[i + 2]); //set color of the board of circle buttons
                                        gameBoard[current_row][current_col] = COLOURS[i + 2]; //set color of the board of strings
                                    } 
                                    else { //if it is the computer's turn to guess, meaning the user is inputting the code for the AI to guess
                                        code[current_col].setColor(BUTTON_COLOURS[i + 2]); //set color of the code
                                        stringCode[current_col] = COLOURS[i + 2]; //set color of the code as a string
                                    }
                                    //update the GUI to display the new changes
                                    revalidate();
                                    repaint();
                                }
                                current_col++; //move to the next column
                            }
                        }
                    }
                }
            });
        }

        //setting up the code for UserPegs, which are the hints provided by the user
        UserPegs = new CircleButton[2]; //create an array of 2 circle buttons
        for (int i = 0; i < 2; i++) { //run 2 times for each colour
            UserPegs[i] = new CircleButton("a", BUTTON_COLOURS[i]); //create a circle button, set string for sizing, and set color of the button
            UserPegs[i].addActionListener(new ActionListener() { //add an action listener to the button
                @Override
                public void actionPerformed(ActionEvent e) { //create a method for what happens when a certain button is pressed
                    boolean flag = true;
                    Black = 0;
                    for (int i = 0; i < 4; i++) {
                        if (hintBoard[current_row][i].equals("BLACK")) {
                            Black++;
                        }
                    }
                    if (Black == 4) {
                        flag = false;
                    }
                    if (flag) {
                        for (int i = 0; i < 2; i++) { //run 2 times for both colours
                            if (UserPegs[i] == e.getSource()) { //determine which button was pressed
                                if (current_col > 3) { //if current column is greater than 3
                                    response.setText("<html><body>Hint is at max length</body></html>"); //tell user that the hint is at max length
                                    current_col = 3; //set current column to 3 so that if delete is pressed, errors will not show up assigning black to buttons out of bounds
                                } 
                                else { //if current column is less than 3
                                    hints[current_row][current_col].setColor(BUTTON_COLOURS[i]); //set button colour 
                                    hintBoard[current_row][current_col] = COLOURS[i]; //set color of hint as a string
                                    //update the GUI to display the new changes
                                    revalidate();
                                    repaint();
                                }
                                current_col++; //move to the next column
                            }
                        }
                    }
                }
            });
        }

        //creating the GUI for the menubar
        JMenuBar menuBar = new JMenuBar(); //create a menu bar
        menu1Item.addActionListener(this); //add an action listener to item under menu 1 dropdown
        menu2Item1.addActionListener(this); //add an actionlistener to 1st item under menu 2 dropdown
        menu2Item2.addActionListener(this); //add an actionlistener to 2nd item under menu 3 dropdown
        menu3Item.addActionListener(this); //add an actionlistener to item under menu 3 dropdown
        menu4Item.addActionListener(this); //add an actionlistener to item under menu 4 dropdown
        JMenu menu1 = new JMenu("How to Play"); //create menu 1 and set as how to play
        menu1.add(menu1Item); //add dropdown item so that it can be selected
        menuBar.add(menu1); //add menu 1 to the menu bar
        JMenu menu2 = new JMenu("New Game"); //create menu 2 and set as new game
        menu2.add(menu2Item1); //add 1st dropdown item so that it can be selected
        menu2.add(menu2Item2); //add 2nd dropdown item so that it can be selected
        menuBar.add(menu2); //add menu 2 to the menu bar
        JMenu menu3 = new JMenu("Save"); //create menu 3 and set as save
        menu3.add(menu3Item); //add dropdown item so that it can be selected
        menuBar.add(menu3); //add menu 3 to the menu bar
        JMenu menu4 = new JMenu("Load"); //create menu 4 and set as load
        menu4.add(menu4Item); //add dropdown item so that it can be selected
        menuBar.add(menu4); //add menu 4 to the menu bar
        setJMenuBar(menuBar); //add menu bar to the JFrame

        //setting up elements to display the final solution
        code = new CircleButton[4]; //create array of 4 circle buttons for the code
        stringCode = new String[4]; //create string array length 4 for the code
        JPanel solutionSet = new JPanel(); //create a panel for the solution
        solutionSet.setLayout(new BoxLayout(solutionSet, BoxLayout.Y_AXIS)); //set the layout of the panel as box layout vertically
        JPanel solution = new JPanel(); //create a secondary panel for the solution
        solution.setLayout(new GridLayout(1, 4, 0, 7)); //set layout as grid layout with 1 row, 4 columns
        solutionSet.setBackground(new Color(153, 153, 153)); //set the background colour of both panels as a medium gray to differentiate that it is the solution
        solution.setBackground(new Color(153, 153, 153));
        for (int i = 0; i < 4; i++) { //run 4 times
            code[i] = new CircleButton("txt", Color.BLACK); //create circle button, set string for sizing, set colour as black
            stringCode[i] = COLOURS[0]; //set colour as black for all strings
            solution.add(code[i]); //add each button to the solution panel
        }
        solutionSet.add(Box.createRigidArea(new Dimension(0, 10))); //create rigid area of 10 pixels
        solutionSet.add(solution); //add solution panel
        solutionSet.add(Box.createRigidArea(new Dimension(0, 10))); //create rigid area of 10 

        //formatting colour choices on a panel
        colourChoicesPanel = new JPanel(); //create panel
        colourChoicesPanel.setLayout(new GridLayout(1, 6, 10, 0)); //set grid layout of 1 row, 6 columns, 10 pixels between each
        for (CircleButton button : colourChoices) {
            colourChoicesPanel.add(button); //add buttons to panel
        }

        //formatting gameboard circle buttons on a panel
        JPanel gameBoard = new JPanel(); //create panel
        //gameBoard.setSize(new Dimension(220, 300));
        gameBoard.setLayout(new GridLayout(10, 4, 0, 7)); //set grid layout of 10 rows, 4 columns, 7 pixels between each row
        for (int row = 0; row < 10; row++) { //run 10 times
            for (int col = 0; col < 4; col++) { //run 4 times
                gameBoard.add(gameState[row][col]); //add button to panel
            }
        }

        //add commands of buttons
        JPanel commands = new JPanel(); //create panel
        commands.setLayout(new FlowLayout()); //set layout as flow
        delete.addActionListener(this); //add an action listener to delete button
        check.addActionListener(this); //add an action listener to check button
        commands.add(delete); //add delete to panel
        commands.add(check); //add check to panel

        //formatting the hint panel
        JPanel hintPanel = new JPanel(); //create panel
        //hintPanel.setSize(new Dimension(220, 300));
        hintPanel.setLayout(new GridLayout(10, 4, -50, 24)); //set layout as grid layout with 10 rows, 4 columns, negative space between each column to make them closer, 24 pixels between each row
        for (int row = 0; row < 10; row++) { //run through rows
            for (int col = 0; col < 4; col++) { //run through columns
                hintPanel.add(hints[row][col]); //add buttons to panel
            }
        }

        //formatting labels in left container
        JLabel title = new JLabel("Welcome to Codebreaker!", JLabel.CENTER); //create title 
        title.setVerticalAlignment(JLabel.CENTER); //set alignment
        title.setFont(new Font("ComicSans", Font.BOLD, 15)); //make title bold
        title.setPreferredSize(new Dimension(250, 100)); //set size of title
        JLabel modeLabel = new JLabel("Mode:", JLabel.CENTER); //create label for the mode
        modeLabel.setVerticalAlignment(JLabel.TOP); //set alignment
        modeLabel.setFont(new Font("Verdana", Font.PLAIN, 15)); //set font as Verdana
        modeLabel.setPreferredSize(new Dimension(150, 50)); //set size
        mode = new JLabel(); //create label for the mode, which may vary
        mode.setVerticalAlignment(JLabel.TOP); //set alignment
        mode.setFont(new Font("Verdana", Font.PLAIN, 15)); //set font as Verdana
        mode.setPreferredSize(new Dimension(150, 50)); //set size
        response = new JLabel(); //set label for response
        response.setText("<html><body>Click on the corresponding<br>colored peg to pick and<br>place your peg in the row</body></html>"); //set default response
        response.setFont(new Font("Verdana", Font.ITALIC, 15)); //make font italicized
        response.setPreferredSize(new Dimension(150, 50)); //set size

        //adding all of the above to a larger container
        JPanel container1 = new JPanel(); //create panel
        container1.setLayout(new BoxLayout(container1, BoxLayout.Y_AXIS)); //set layout as box layout vertical
        container1.add(Box.createRigidArea(new Dimension(15, 0))); //create rigid area between the left side
        container1.add(title); //add the title
        container1.add(Box.createRigidArea(new Dimension(0, 20))); //create rigid area of 20 pixels
        container1.add(modeLabel); //add mode label
        container1.add(Box.createRigidArea(new Dimension(0, 10))); //create rigid area of 10 pixels
        mode.setText("Player vs. Computer"); //set text, default as player vs computer
        container1.add(mode); //add mode
        container1.add(Box.createRigidArea(new Dimension(0, 30))); //create rigid area of 30 pixels
        container1.add(response); //add response label

        //add components to the center panel
        JPanel container = new JPanel(); //create panel
        container.setLayout(new BoxLayout(container, BoxLayout.Y_AXIS)); //set layout as box layout vertical
        container.add(gameBoard); //add gameboard of circle buttons
        container.add(Box.createRigidArea(new Dimension(0, 50))); //set rigid area as 50
        container.add(solutionSet); //add solution set panel
        container.add(Box.createRigidArea(new Dimension(0, 350))); //set rigid area as 350, making sure that both rigid areas add 400

        //add componts to the right panel
        JPanel container2 = new JPanel(); //create panel
        container2.setLayout(new BoxLayout(container2, BoxLayout.Y_AXIS)); //set layout as box layout vertical
        container2.add(Box.createRigidArea(new Dimension(0, 2))); //set rigid area
        container2.add(hintPanel); //add hints panel
        container2.add(Box.createRigidArea(new Dimension(0, 60))); //set rigid area
        container2.add(commands); //add commands
        container2.add(Box.createRigidArea(new Dimension(0, 40))); //set rigid area
        container2.add(colourChoicesPanel); //add colour choices
        container2.add(Box.createRigidArea(new Dimension(0, 4))); //set rigid area

        //final components to finish off the constructor
        add(container1); //add left panel to JFrame
        add(container); //add center panel to JFrame
        add(container2); //add right panel to JFrame
        pack(); //attempt to size components better
        setTitle("Codebreaker"); //set title of the JFrame as Codebreaker
        setSize(700, 550); //set fixed size of the JFrame
        setVisible(true); //set visible
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //will close program when GUI is closed
    }

    @Override
    /**
     * if certain buttons are pressed in the GUI, the following steps will be
     * determined here
     */
    public void actionPerformed(ActionEvent event) {
        String button = event.getActionCommand(); //determine the button based on its text
        if (event.getSource() == menu2Item1) {  //if the 1st item under menu 2 was clicked
            reset(); //call the reset method
            check.setText("Enter"); //change check to "Enter"
            mode.setText("Computer vs. Player"); //change the mode label to CVP
            current_row = 0; //set the current row as negative
            turn = "Comp"; //set the turn as comp
            current_col = 0;
            response.setText("<html><body>Click on the corresponding<br>colored peg to pick and<br>place your peg in the row</body></html>"); //set text to default text
            colourChoicesPanel.removeAll(); //removes all the components in the color choices panel
            colourChoicesPanel.setLayout(new GridLayout(1, 2, 10, 0)); //reset the layout, as only 2 colours are needed when the player is enter the hints
            for (int i = 0; i < 2; i++) { //run 2 times
                colourChoicesPanel.add(UserPegs[i]); //add user pegs of both colours
            }
            CreateAllCode(); //call the method to create all code
            guess = "0011"; //set guess as default first guess as part of Donald Knuth's algorithm

            allCodes.remove(guess); //remove the guess from all codes, as it has already been guessed
            for (int i = 0; i < 4; i++) { //run 4 times
                gameState[current_row][i].setColor(BUTTON_COLOURS[Integer.parseInt("" + guess.charAt(i)) + 2]); //set colour on game board to show computer's guess
                gameBoard[current_row][i] = COLOURS[Integer.parseInt("" + guess.charAt(i)) + 2];
            }
            //update the GUI
            revalidate();
            repaint();
        } 
        else if (event.getSource() == menu2Item2) { //if the 2nd item under menu 2 was clicked
            reset(); //call the reset method
            check.setText("Check"); //change check button to "Check", in case it was "Enter" previously
            mode.setText("Player vs. Computer"); //change the mode label to PVC
            turn = "Player"; //set the turn as the player
            computerCode = CreateCode(); //call the create code method for the computer
        } 
        else if (event.getSource() == menu1Item) { //if the dropdown item under menu 1 was clicked
            JOptionPane.showMessageDialog(this,
                    "Welcome to Codebreaker! Click \"New Game\" and one of the options to select a gameplay mode, as this is a two player game.\n"
                    + "One person creates a hidden colour combination or code - consisting of 4 colour pegs chosen from 6 colours. You may repeat\n"
                    + "colours. In Player vs. Computer, you will be guessing the computer-created code. In Computer vs. Player, you will be\n"
                    + "setting the code and providing hints, while the Computer will be guessing your code. Hints are given in the form of a\n"
                    + "white peg for a correct colour but incorrect position and a black peg for a correctly positioned colour. A player has 10\n"
                    + "tries to guess the code before they lose. Click the \"Delete\" button to undo the colour you just entered. Click the \"Check\"\n"
                    + "button when in PVC mode to submit your guess, and click the \"Enter\" button to submit a code for the computer to guess\n"
                    + "and to submit hints for the computer. You can also choose to save the game or load a previously saved game by pressing \n"
                    + "the \"Save\" or \"Load\" buttons."); //add a how to play description in a message dialog box
        } 
        else if (event.getSource() == menu3Item) { //if the dropdown item under menu 3 was clicked
            try { //add try catch, necessary when throwing exceptions for file writing/reading
                Save(); //call save method
            } catch (IOException e) {
                e.printStackTrace();
            }
        } 
        else if (event.getSource() == menu4Item) { //if the dropdown item under menu 4 was clicked
            try { ////add try catch, necessary when throwing exceptions for file writing/reading
                Load(); //call load method
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (button.equals("Delete")) { //if the text on the button was "Delete"
            if (current_col > 0) { //if the current column is not at the first index
                current_col--; //subtract one from current column
            } 
            else {
                response.setText("<html><body>Nothing to delete</body></html>"); //else prompt user that there is nothing to delete
            }
            if (turn.equals("Player")) { //if it is the player's turn
                gameState[current_row][current_col].setColor(BUTTON_COLOURS[0]); //set current circle button to black
                gameBoard[current_row][current_col] = COLOURS[0]; //set current circle button in string to black
            } 
            else { //if it is the computers turn 
                boolean flag = true;
                Black = 0;
                for (int i = 0; i < 4; i++) {
                    if (hintBoard[current_row][i].equals("BLACK")) {
                        Black++;
                    }
                }
                if (Black == 4) {
                    flag = false;
                }
                if (flag) {
                    hints[current_row][current_col].setColor(Color.GRAY); //set hint color to gray
                    hintBoard[current_row][current_col] = "GRAY"; //set hint color as string to gray
                }
            }
            //update the colours of the game board
            revalidate();
            repaint();
        } 
        else if (button.equals("Check")) { //if check button was clicked
            boolean flag = true; //create boolean variable to determine if the code is valid, true if it is
            for (int i = 0; i < 4; i++) { //run 4 times
                if (gameBoard[current_row][i].equals("BLACK")) { //if the current code at the column is black
                    response.setText("<html><body>Code too short</body></html>"); //set text as the code is too short
                    flag = false; //set boolean variable as false, because the code is invalid
                    break; //break through the loop, as the code must be completely filled to be valid
                }
            }
            if (flag) { //if the code is valid
                guess = ""; //create guess
                response.setText("<html><body>Click on the corresponding<br>colored peg to pick and<br>place your peg in the row</body></html>"); //set text as default text
                for (int i = 0; i < 4; i++) { //run 4 times
                    for (int j = 0; j < BUTTON_COLOURS.length; j++) { //run through the 8 button colours
                        if (gameBoard[current_row][i].equals(COLOURS[j])) { //if the current column circle button is a certain colour
                            guess += j - 2; //add the number of the colour to guess, subtract 2 as the first 2 are hint colours
                            break; //break out of this column
                        }
                    }
                }
                getHints(guess, computerCode); //call get hints to determine number of white and black pegs
                //System.out.println(computerCode); //prints out the code to the system for debugging
                //System.out.println(Black + " " + White); //prints out the number of blacks and whites
                int pos = 0; //create position variable
                for (int i = 0; i < Black; i++) { //run for number of black pegs given
                    hints[current_row][pos].setColor(BUTTON_COLOURS[0]); //set color of hints to black
                    hintBoard[current_row][pos] = COLOURS[0]; //set color of hints to black as a string
                    pos++; //move position to the right one column
                }
                for (int i = 0; i < White; i++) { //run for number of white pegs given
                    hints[current_row][pos].setColor(BUTTON_COLOURS[1]); //set color of hints to white
                    hintBoard[current_row][pos] = COLOURS[1]; //set color of hints to white as a string
                    pos++; //move position to the right one column
                }
                //update the colours of the game board
                revalidate();
                repaint();
                if (Black == 4) { //if there are 4 blacks
                    if (turn.equals("Player")) { //if it is the player's turn
                        response.setText("<html><body>YOU WON</body></html>"); //tell user that they won
                        for (int i = 0; i < 4; i++) { //run 4 times
                            code[i].setColor(BUTTON_COLOURS[Integer.parseInt("" + computerCode.charAt(i)) + 2]); //set color of the code to those of the solution
                        }
                        //update the GUI
                        revalidate();
                        repaint();
                    }
                }
                current_row++; //add 1 to the current row
                if (current_row >= 10 && Black != 4) { //if index of the row is >= 10
                    response.setText("<html><body>YOU LOST!</body></html>"); //tell user that they lost
                    for (int i = 0; i < 4; i++) { //run 4 times
                        code[i].setColor(BUTTON_COLOURS[Integer.parseInt("" + computerCode.charAt(i)) + 2]); //set color of the code to those of the solution
                    }
                    //update the GUI
                    revalidate();
                    repaint();
                }
                current_col = 0; //set current column back to 0
            }
        } 
        else if (button.equals("Enter")) { //if text on the button was "Enter"
            //set current column as 0
            boolean flag = true; //create boolean variable to determine if the code is valid, true if it is
            //if current row is greater than -1
            current_col = 0;
            Black = 0; //set black as 0
            White = 0; //set white as 0
            for (int i = 0; i < 4; i++) { //run 4 times 
                if (hintBoard[current_row][i].equals(COLOURS[0])) { //if hint is black
                    Black++; //add 1 to black
                } 
                else if (hintBoard[current_row][i].equals(COLOURS[1])) { //if hint is white
                    White++; //add 1 to white
                }
            }
            if (Black == 4) { //if there are 4 blacks
                for (int i = 0; i < 4; i++) { //run 4 times
                    stringCode[i] = COLOURS[Integer.parseInt("" + guess.charAt(i)) + 2];
                    code[i].setColor(BUTTON_COLOURS[Integer.parseInt("" + guess.charAt(i)) + 2]); //set color of the code to those of the solution
                }
                //update the GUI
                revalidate();
                repaint();
                response.setText("<html><body>THE COMPUTER WON</body></html>"); //set text as the computer won
                flag = false; //code is valid, but it's not
            } 
            else { //if there aren't 4 blacks
                removeColour(White, Black); //call the remove method to eliminate possibilities
                if (possibleCodes.size() == 1) { //if there is only one possible code
                    guess = possibleCodes.get(0); //the guess must be the first in the arraylist
                } 
                else if (possibleCodes.size() > 1) { //if the size of the arraylist is greater than 1
                    guess = miniMax(); //call the minimax guessing algorithm
                } 
                else { //if size is less than -1, in order to avoid errors
                    response.setText("<html><body>You inputted the wrong hints! The computer automatically wins.</body></html>"); //tell user that they inputted the hints wrong
                    flag = false; //set flag as false
                }
            }

            if (flag) { //if code is valid
                current_row++; //add 1 to current row
                allCodes.remove(guess); //remove the guess from all codes, as it has already been guessed
                for (int i = 0; i < 4; i++) { //run 4 times
                    gameState[current_row][i].setColor(BUTTON_COLOURS[Integer.parseInt("" + guess.charAt(i)) + 2]); //set colour on game board to show computer's guess
                    gameBoard[current_row][i] = COLOURS[Integer.parseInt("" + guess.charAt(i)) + 2];
                }
                //update the GUI
                revalidate();
                repaint();
            }
        }
    }

    public static void main(String[] args) { //main method
        turn = "Player"; //set turn as player on start
        computerCode = CreateCode(); //call the createCode method for the computer to guess
        CodeBreakerFinal gui = new CodeBreakerFinal(); //call the class to create the GUI
    }

    /**
     * method for the computer to create a code
     *
     * @return a String of numbers corresponding to the colours
     */
    public static String CreateCode() {
        String code = ""; //create an empty string to hold the code
        Random r = new Random(); //create random class
        for (int i = 0; i < 4; i++) { //run 4 times
            code += "" + r.nextInt(6); //add a random number from 0 to 5
        }
        return code; //return the string
    }

    /**
     *
     * @param code1 is a String containing one code
     * @param code2 is a String containing a different code this method gets the
     * hints of two codes when compared
     */
    public static void getHints(String code1, String code2) {
        White = 0; //set number of white pegs to 0
        Black = 0; //set number of black pegs to 0
        String wrongColors = ""; //have a string of the colors not used in code 1
        String wrongColors2 = ""; //have a string of the colors not used in code 2
        for (int j = 0; j < 4; j++) { //run 4 times for each colour of code
            if (code1.charAt(j) == code2.charAt(j)) { //check if colours are the same in correct position
                Black++; //add 1 to black
            } 
            else { //if they are not the same colour
                wrongColors += code1.charAt(j); //add the colors to the wrongColors if not
                wrongColors2 += code2.charAt(j);
            }
        }
        //finding the white hints
        boolean[] vis = new boolean[wrongColors.length()]; //create a boolean array that makes sure we don't repeat a position twice
        for (int j = 0; j < wrongColors2.length(); j++) {  //loop the size of wrongColors2
            for (int i = 0; i < wrongColors.length(); i++) { //loop the size of wrongColors
                if (wrongColors2.charAt(j) == wrongColors.charAt(i) && !vis[i]) { //make sure the colour is there and not used 
                    White++; //increase White by 1
                    vis[i] = true; //make that index visited
                    break; //break, so no duplicates and incorrect hints
                }
            }
        }
    }

    /**
     *
     * @return a String for the computer's guess miniMax is the algorithm for
     * the AI to guess a code based on the hints provided by the user
     */
    public static String miniMax() {//get the best possible guess
        int[] MaximumRemainingCodes = new int[allCodes.size()];//create a int list with the size of the number of unused code
        int max; //create a variable called max
        for (int i = 0; i < allCodes.size(); i++) {//loop through all codes not used
            int[][] allScore = new int[5][5]; //create list that stores the number of codes that will remain for each black white combination if that code is chosen
            for (int j = 0; j < possibleCodes.size(); j++) {//compare each unused code to each code that can be the answer
                getHints(allCodes.get(i), possibleCodes.get(j)); //get the black and white pegs
                allScore[Black][White]++; //increment that position in allScore
            }
            max = 0; //set max to 0
            for (int p = 0; p < 5; p++) {
                for (int j = 0; j < 5; j++) { //loop through allScore
                    max = Math.max(max, allScore[p][j]); //get the most amount of codes that could be left over or the worst case
                }
            }
            MaximumRemainingCodes[i] = max; //assign the worst case to MaximumRemainingCodes
        }
        int min = MaximumRemainingCodes[0];//set min to the first value  in MaximumRemainingCodes
        int index = 0; //store the index of the code with the best case
        for (int i = 1; i < MaximumRemainingCodes.length; i++) { // loop through MaximumRemainingCodes
            if (MaximumRemainingCodes[i] < min) { //check if the worst case is better than the current worst case
                min = MaximumRemainingCodes[i]; //set the new best case
                index = i; //store index
            } 
            else if (min == MaximumRemainingCodes[i] && possibleCodes.contains(allCodes.get(i))) { //if they are equal check if the new case is part of possible list
                index = i; //store index
            }
        }
        return allCodes.get(index); //return the next guess
    }

    /**
     * this creates all the codes and assigns it to possibleCodes and allCodes
     */
    public static void CreateAllCode() {
        for (int i = 0; i < 6; i++) { //run 6 times
            for (int j = 0; j < 6; j++) { //run 6 times
                for (int k = 0; k < 6; k++) { //run 6 times
                    for (int l = 0; l < 6; l++) { //run 6 times
                        possibleCodes.add(i + "" + j + "" + k + "" + l); //add each combination into possible codes
                        allCodes.add(i + "" + j + "" + k + "" + l); //add each combination into all codes
                    }
                }
            }
        }
    }

    /**
     *
     * @throws IOException is necessary when writing to a file saves the game to
     * a file so that they can come back to it later
     */
    public void Save() throws IOException {
        File myFile = new File("Save.txt"); //declares a file
        myFile.createNewFile(); //create file on users computer
        PrintWriter PW = new PrintWriter(myFile); //create print writer
        PW.println(turn); //Write whose turn it is 
        if (turn.equals("Player")) {
            PW.println(computerCode); //Write the computer's code if player is guessing
        } 
        else {
            for (int i = 0; i < 4; i++) {
                PW.print(stringCode[i] + " "); //Write players code if computer guessing
            }
            PW.println(); //goto next line
        }
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 4; j++) {
                PW.print(gameBoard[i][j] + " "); //Write the game board 
            }
        }
        PW.println(); //goto next line
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 4; j++) {
                PW.print(hintBoard[i][j] + " "); //Write the hints to the file
            }
        }
        PW.println();
        if (turn.equals("Comp")) {
            for (int i = 0; i < possibleCodes.size(); i++) {
                PW.print(possibleCodes.get(i) + " "); //Write the codes still possible if it's computer's turn
            }
        }
        PW.close(); //Close print writer
    }

    /**
     *
     * @throws IOException is necessary when reading from a file will load
     * elements that are saved on the file to the game to continue where the game left off
     */
    public void Load() throws IOException {
        File myFile = new File("Save.txt"); //declare file
        if (myFile.exists()) { //check if file exist
            Scanner fr = new Scanner(myFile); //create file writer
            turn = fr.nextLine(); //get whose turn it is
            if (turn.equals("Player")) {
                computerCode = fr.nextLine(); //get computer turn if player turn
                check.setText("Check"); //set the button name to enter
                mode.setText("Player vs. Computer"); //let player know its player guessing
                colourChoicesPanel.removeAll(); //remove all items in panel
                colourChoicesPanel.setLayout(new GridLayout(1, 6, 10, 0)); //set layout
                for (int i = 0; i < 6; i++) {
                    colourChoicesPanel.add(colourChoices[i]); //add the colour choices
                }
            } 
            else {
                boolean flag = true; //create boolean variable to check if user entered the complete code when saved
                check.setText("Enter"); //set the button name to enter
                mode.setText("Computer vs. Player"); //let player know its computer guessing
                for (int i = 0; i < 4; i++) {
                    stringCode[i] = fr.next();//get colour of the code
                }
                if (flag) { //if complete code
                    colourChoicesPanel.removeAll(); //remove all items in panel
                    colourChoicesPanel.setLayout(new GridLayout(1, 2, 10, 0)); //set layout
                    for (int i = 0; i < 2; i++) {
                        colourChoicesPanel.add(UserPegs[i]); //add the white and black pegs for user to choose
                    }
                }
                CreateAllCode(); //create all possible codes
            }
            current_col = 0;
            current_row = 0;//set the column and row to 0
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 4; j++) {
                    gameBoard[i][j] = fr.next();//get color in current position of gameboard
                    for (int p = 0; p < COLOURS.length; p++) {
                        if (gameBoard[i][j].equals(COLOURS[p])) {
                            gameState[i][j].setColor(BUTTON_COLOURS[p]); //place the correct colour on the gui
                        }
                    }
                    if (gameBoard[i][j].equals("BLACK") && current_row == 0 && turn.equals("Player")) { //if colour of current gameboard position is black and current row is 0 and player turn 
                        current_row = i;//get current row of the game when left off
                        current_col = j;//get current column of the game when left off
                    } 
                    else if (gameBoard[i][j].equals("BLACK") && current_row == 0) {//if colour of current gameboard position is black and current row is 0 and player turn and computer turn
                        current_row = i - 1;//get current row of the hints
                    }
                    if (turn.equals("Comp")) {
                        allCodes.remove(gameBoard[i][j]);//remove the guess if computer was guessing
                    }
                }
            }
            for (int i = 0; i < 10; i++) {
                Black = 0;
                for (int j = 0; j < 4; j++) {
                    hintBoard[i][j] = fr.next(); //get hints of previous game
                    for (int p = 0; p < COLOURS.length; p++) {
                        if (hintBoard[i][j].equals(COLOURS[p])) {
                            hints[i][j].setColor(BUTTON_COLOURS[p]); //place the hint on the game board
                        }
                    }
                    if (hintBoard[i][j].equals("GRAY") && current_row == i && current_col == 0 && turn.equals("Comp")) {
                        current_col = j; //if hint panel is gray and computer turn get the current column for the first gray on the current row
                    }
                    if (hintBoard[i][j].equals("BLACK")) { //if the hint is black
                        Black++; //add 1 to black
                    }
                }
                if (Black == 4 || current_row == 9) { //if there are 4 blacks or max guesses made
                    for (int j = 0; j < 4; j++) { //run through columns
                        for (int p = 0; p < COLOURS.length; p++) { //run through colours
                            if (gameBoard[i][j].equals(COLOURS[p])) { //if gameboard colour equals the indicated colour
                                code[j].setColor(BUTTON_COLOURS[p]); //set the code colour 
                            }
                        }
                    }
                }
            }
            if (turn.equals("Comp")) {//check if computer turn
                possibleCodes = new ArrayList<>(); //remove all elements in arrayList
                for (int i = 0; i < possibleCodes.size(); i++) {
                    possibleCodes.add(fr.next()); //add all the elements from the previous game that can still be the code computer created
                }
            }
            fr.close();
            revalidate();//update gui to the save file game
            repaint();
        } 
        else {
            response.setText("<html><body>No previous game found!</body></html>"); //tell user that there is no save file
        }
    }

    /**
     *
     * @param w is the number of white hints
     * @param b is the number of black hints removes codes that are not correct
     * from possible codes
     */
    public static void removeColour(int w, int b) {
        for (int i = 0; i < possibleCodes.size(); i++) { //run through possible codes
            getHints(possibleCodes.get(i), guess); //get the hints when comparing current guess to all the codes that are still possible for the computer
            if (w != White || b != Black) { //if the hints are not the same as what the user said then remove that code
                possibleCodes.remove(i); //remove the code from the arraylist of possible codes
                i--; //subtract 1 from the index so that we can continue off from the same spot, since the arraylist indexes are shifted
            }
        }
    }

    /**
     * method to reset the entire game, if the user clicks on the new game in
     * the menu bar
     */
    public void reset() {
        response.setText("<html><body>Click on the corresponding<br>colored peg to pick and<br>place your peg in the row</body></html>"); //set text to default text
        colourChoicesPanel.removeAll(); //remove all components from colour choices panel
        colourChoicesPanel.setLayout(new GridLayout(1, 6, 10, 0)); //set layout of colour choices
        for (CircleButton button : colourChoices) {
            colourChoicesPanel.add(button); //add a button for each colour choice
        }
        current_col = 0; //current column set back to 0
        current_row = 0; //current row set back to 0
        for (int i = 0; i < 10; i++) { //run 10 times
            for (int j = 0; j < 4; j++) { //run 4 times
                gameState[i][j].setColor(BUTTON_COLOURS[0]); //set color as black for circle buttons
                hints[i][j].setColor(Color.GRAY); //set color as gray for hint circle buttons
                gameBoard[i][j] = COLOURS[0]; //set color as black for string
                hintBoard[i][j] = "GRAY"; //set color as gray for string
            }
        }
        for (int i = 0; i < 4; i++) { //run 4 times
            code[i].setColor(BUTTON_COLOURS[0]); //set final solution as all black circle buttons
            stringCode[i] = "BLACK";
        }
        //update the gameboard
        revalidate();
        repaint();
    }
}
